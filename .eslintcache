[{"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/index.js":"1","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/App/App.js":"2","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/apiCalls.js":"3","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/MovieGrid/MovieGrid.js":"4","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/MovieDetails/MovieDetails.js":"5","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Login/Login.js":"6","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Poster/Poster.js":"7","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/StarRating/StarRating.js":"8","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/ListItem/ListItem.js":"9","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/MovieTrailers/MovieTrailers.js":"10","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Search/Search.js":"11","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Banner/Banner.js":"12"},{"size":280,"mtime":1608761657618,"results":"13","hashOfConfig":"14"},{"size":8109,"mtime":1609642752210,"results":"15","hashOfConfig":"14"},{"size":2061,"mtime":1609624655419,"results":"16","hashOfConfig":"14"},{"size":530,"mtime":1608761657616,"results":"17","hashOfConfig":"14"},{"size":6719,"mtime":1609624655417,"results":"18","hashOfConfig":"14"},{"size":1584,"mtime":1609187568519,"results":"19","hashOfConfig":"14"},{"size":544,"mtime":1609635403788,"results":"20","hashOfConfig":"14"},{"size":1248,"mtime":1609624655418,"results":"21","hashOfConfig":"14"},{"size":283,"mtime":1608763355546,"results":"22","hashOfConfig":"14"},{"size":1483,"mtime":1609624655418,"results":"23","hashOfConfig":"14"},{"size":566,"mtime":1609627266860,"results":"24","hashOfConfig":"14"},{"size":1662,"mtime":1609642507092,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"urd8qu",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/index.js",[],["53","54"],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/App/App.js",["55","56","57"],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/apiCalls.js",[],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/MovieGrid/MovieGrid.js",[],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/MovieDetails/MovieDetails.js",["58","59","60"],"import React, { Component } from \"react\";\nimport { fetchSingleMovie, fetchUserRatings, postUserRating, deleteUserRating } from \"../apiCalls\"; \nimport ListItem from \"../ListItem/ListItem\";\nimport MovieTrailers from \"../MovieTrailers/MovieTrailers\";\nimport StarRating from \"../StarRating/StarRating\";\nimport \"./MovieDetails.css\";\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      singleMovie: {},\n      error: \"\",\n      currentUserRating: null,\n      onWatchlist: false\n    }\n  }\n  \n  componentDidMount() {\n    fetchSingleMovie(this.props.id)\n    .then(singleMovie => this.setState({ singleMovie: singleMovie.movie }))\n    .then(() => this.getUserRatings())\n    .catch(error => this.setState({ error: error.message}))\n  }\n\n  componentDidUpdate(prevProps) {\n    if(prevProps.currentUser !== this.props.currentUser) {\n     this.getUserRatings()\n    }\n  }\n\n  getUserRatings() {\n    if (this.props.currentUser) {\n      this.setState({ formattedRating: this.state.singleMovie.average_rating.toFixed(1)})\n      fetchUserRatings(this.props.currentUser.id)\n      .then(ratings => {\n        const userRating = ratings.ratings.find(rating => {\n          return rating.movie_id === this.state.singleMovie.id\n        })\n        this.setState({ currentUserRating: userRating })\n      })\n      .catch(error => this.setState({ error: error.message}))  \n    }\n  }\n\n  formatGenres = () => {\n    if (!this.state.singleMovie.genres) {\n      return <p className=\"unavailable-genres\">Unavailable</p>\n    } else if (this.state.singleMovie.genres.length > 1) {\n      let commaList = this.state.singleMovie.genres.map(genre => {\n        return(\n          <p className=\"genre\">{genre}</p>\n        )\n      })\n      return commaList;\n    } else {\n      return <p className=\"genre\">{this.state.singleMovie.genres[0]}</p>;\n    }\n  }\n\n  generateListItem() {\n    return (\n      <section>\n        <ListItem \n          label=\"Release Date\"\n          body={new Date(this.state.singleMovie.release_date).toLocaleDateString()}\n        />\n        <ListItem \n          label=\"Runtime\"\n          body={`${this.state.singleMovie.runtime} mins`}\n        />\n        <ListItem \n          label=\"Budget\"\n          body={`$${new Intl.NumberFormat(\"en-US\").format(this.state.singleMovie.budget)}`}\n        />\n        <ListItem \n          label=\"Revenue\"\n          body={`$${new Intl.NumberFormat(\"en-US\").format(this.state.singleMovie.revenue)}`}\n        />\n      </section>\n    )\n  }\n\n  toggleWatchlist = () => {\n    if (this.state.onWatchlist === false) {\n      this.setState({ onWatchlist: true })\n    } else {\n      this.setState({ onWatchlist: false})\n    }\n  }\n\n  setStarRating = (rating) => {\n    let ratingId;\n    let userId;\n    let newRating;\n    \n    \n    if (this.props.currentUser && this.state.currentUserRating) {\n      ratingId = this.state.currentUserRating.id\n      userId = this.props.currentUser.id\n      \n      deleteUserRating(userId, ratingId)\n      .then(response => console.log(response))\n      .catch(error => this.setState({ error: error.message }))\n      \n    } else if (this.props.currentUser) {\n      userId = this.props.currentUser.id\n      newRating = {\n        movie_id: this.state.singleMovie.id,\n        rating: +rating\n      }\n      \n      postUserRating(userId, newRating)\n      .then(rating => this.setState({ currentUserRating: rating.rating}))\n      .catch(error => this.setState({ error: error.message }))\n    }\n  }\n\n\n\n  render() {\n    return(\n      <section className=\"movie-details\">\n        <section className=\"banner-container\">\n          <img src={this.state.singleMovie.backdrop_path} className=\"banner-img\"/>\n        </section>\n        <section className=\"movie-info\">\n          <section className=\"movie-aside\">\n            <img src={this.state.singleMovie.poster_path} className=\"poster-img\" />\n            {this.generateListItem()}\n          </section>\n          <section className=\"movie-main\">\n            <section className=\"backdrop-overlay\"> \n              <section className=\"responsive-poster\">\n                <img src={this.state.singleMovie.poster_path} className=\"poster-img\" />\n              </section>\n              <section className=\"main-header-details\">\n                <h1 className=\"title\">{this.state.singleMovie.title}</h1>\n                <p className=\"tagline\">{this.state.singleMovie.tagline}</p>\n                <p className=\"rating\">\n                  <span className=\"rating-star\">â˜† {this.state.formattedRating}</span>/10\n                </p>\n                <section className=\"genre-list\">\n                  {this.formatGenres()}\n                </section>\n              </section>  \n            </section>\n            <section className=\"overview-box\">\n              <section className=\"rating-watchlist\">\n                {!this.state.currentUserRating &&\n                  <StarRating \n                    currentUserRating={0}\n                    canEdit={true} \n                    setStarRating={this.setStarRating}\n                  />\n                }\n                {this.state.currentUserRating && \n                  <StarRating \n                    currentUserRating={this.state.currentUserRating.rating}\n                    canEdit={true} \n                    setStarRating={this.setStarRating}\n                  />\n                }\n                {this.state.onWatchlist === true && <button className=\"on-watchlist-button\" onClick={() => this.toggleWatchlist()}>On Watchlist</button>}\n                {this.state.onWatchlist === false && <button className=\"add-watchlist-button\" onClick={() => this.toggleWatchlist()}>+ Add to Watchlist</button>}\n              </section>\n              <h3>Synopsis</h3>\n              <p className=\"overview\">{this.state.singleMovie.overview}</p>\n              <section className=\"responsive-list\">\n                {this.generateListItem()}\n              </section>\n            </section>\n            <section className=\"trailer-box\">\n              <h3 className=\"trailer-header\">Trailers</h3>\n              <MovieTrailers \n                id={this.props.id} \n              />\n            </section>\n          </section>\n        </section>\n      </section>\n    )\n  }\n}\n\nexport default MovieDetails;","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Login/Login.js",["61"],"import React, { Component } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: ''\n    }\n  }\n\n  handleClick(event) {\n    event.preventDefault()\n  }\n\n  handleChange(event) {\n    this.props.clearError()\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  determineError = () => {\n    if (this.props.error) {\n      return (\n        <section>\n          <p>{this.props.error}</p>\n        </section>\n      )\n    }\n  }\n\n  submitLogin = () => {\n    this.props.validateLogin(this.state.email, this.state.password);\n    this.clearInputs()\n  }\n\n  clearInputs = () => {\n    this.setState({ email: '', password: '' })\n  }\n\n  render() {\n    return(\n      <section>\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          value={this.state.email}\n          onClick={(event) => this.handleClick(event)}\n          onChange={(event) => this.handleChange(event)}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          value={this.state.password}\n          onClick={(event) => this.handleClick(event)}\n          onChange={(event) => this.handleChange(event)}\n        />\n        {this.determineError()}\n        <button \n          className=\"submit-button\" \n          onClick={this.submitLogin}>\n          SUBMIT\n        </button>\n      </section>\n    )\n  }\n}\n\nexport default Login;","/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Poster/Poster.js",[],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/StarRating/StarRating.js",[],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/ListItem/ListItem.js",[],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/MovieTrailers/MovieTrailers.js",[],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Search/Search.js",[],"/Users/alyssabull/Turing/mod3/portfolio-projects/underrated/src/Banner/Banner.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":14},{"ruleId":"70","severity":1,"message":"71","line":33,"column":33,"nodeType":"72","messageId":"73","endLine":33,"endColumn":35},{"ruleId":"70","severity":1,"message":"74","line":60,"column":45,"nodeType":"72","messageId":"75","endLine":60,"endColumn":47},{"ruleId":"76","severity":1,"message":"77","line":137,"column":11,"nodeType":"78","endLine":137,"endColumn":83},{"ruleId":"76","severity":1,"message":"77","line":141,"column":13,"nodeType":"78","endLine":141,"endColumn":84},{"ruleId":"76","severity":1,"message":"77","line":147,"column":17,"nodeType":"78","endLine":147,"endColumn":88},{"ruleId":"66","severity":1,"message":"79","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":16},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Banner' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Dropdown' is defined but never used.","no-global-assign","no-unsafe-negation"]